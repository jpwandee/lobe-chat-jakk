import { CopyOutlined, EyeInvisibleOutlined, EyeOutlined }
import { Button }
import { App, Flex }
import { FC, useState }
import { useTranslation }

interface apikeydisplayprops {
  apiKey?: string;
}

const ApiKeyDisplay: FC<ApiKeyDisplayProps> = ({ apiKey }) => {
  const { t }
  const [isVisible, setIsVisible] = useState(false)
  const { message }

  const togglevisibility = () => {
    setIsVisible(!isVisible)
  }

  const handlecopy = async () => {
    if (!apiKey) return
    try {
      await navigator.clipboard.writeText(apiKey)
      message.success(t('apikey.display.copySuccess'))
    }

    catch {
      message.error(t('apikey.display.copyError'))
    }
  }

  const displayValue = apiKey && (isVisible ? apiKey : `lb-${'*'.repeat(apiKey.length - 2)}`);

  if (!apiKey) {
    return t('apikey.display.autoGenerated');
  }

  return (
    <Flex align="center" gap={8}>
      <span style={{ fontSize: '14px' }}>{displayValue}</span>
      <Flex>
        <Button
          icon={isVisible ? <EyeInvisibleOutlined /> : <EyeOutlined />}
          onClick={toggleVisibility}
          size="small"
          title={isVisible ? t('apikey.display.hide') : t('apikey.display.show')}
          type="text"
        />
        <Button
          icon={<CopyOutlined />}
          onClick={handleCopy}
          size="small"
          title={t('apikey.display.copy')}
          type="text"
        />
      </Flex>
    </Flex>
  );
};

export default ApiKeyDisplay
